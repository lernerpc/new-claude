# /victory/custom/addons/bi_sport_invoice_extension/models/account_move.py
import logging
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

_logger = logging.getLogger(__name__)

class AccountMove(models.Model):
    _inherit = 'account.move'

    # Add the pricelist_id field to the invoice model
    pricelist_id = fields.Many2one(
        'product.pricelist',
        string='Pricelist',
        help="Pricelist used for this invoice. Can be automatically set from the partner or admission."
    )
    
    # Add field to store membership fee name for display purposes
    membership_fee_name = fields.Char(string='Membership Fee', readonly=True, help="Name of the membership fee used for this invoice")

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            _logger.info(f"üîç Creating invoice with vals: invoice_origin={vals.get('invoice_origin')}, ref={vals.get('ref')}, move_type={vals.get('move_type')}")
            
            # Check if this invoice is from student admission and has a reference containing fee info
            if vals.get('invoice_origin') and vals.get('ref'):
                _logger.info(f"üîç Found invoice_origin and ref, searching for admission...")
                
                # Find the student admission record by name/origin
                admission = self.env['student.admission'].search([
                    ('name', '=', vals.get('invoice_origin'))
                ], limit=1)
                
                _logger.info(f"üîç Found admission: {admission.name if admission else 'None'}")
                
                if admission:
                    # Extract fee name from ref (format: "Invoice for {fee_name} - {admission_name}")
                    ref = vals.get('ref', '')
                    _logger.info(f"üîç Processing ref: {ref}")
                    
                    if ref.startswith('Invoice for ') and ' - ' in ref:
                        _logger.info(f"üîç Found invoice pattern in ref")
                        
                        try:
                            # Extract fee name from "Invoice for {fee_name} - {admission_name}"
                            fee_part = ref.replace('Invoice for ', '').split(' - ')[0]
                            _logger.info(f"üîç Extracted fee_part: {fee_part}")
                            
                            # Find membership fee by name
                            membership_fee = self.env['sport.membership.fees'].search([
                                ('name', '=', fee_part)
                            ], limit=1)
                            
                            _logger.info(f"üîç Found membership fee: {membership_fee.name if membership_fee else 'None'}")
                            
                            if membership_fee:
                                # Store membership fee name for display
                                vals['membership_fee_name'] = membership_fee.name
                                _logger.info(f"üîç Set membership_fee_name: {membership_fee.name}")
                                
                                # Set invoice date and due date to membership fee start date
                                if membership_fee.start_date:
                                    old_date = vals.get('invoice_date')
                                    vals['invoice_date'] = membership_fee.start_date
                                    vals['invoice_date_due'] = membership_fee.start_date
                                    
                                    _logger.info(f"‚úÖ Set invoice dates: {old_date} ‚Üí {membership_fee.start_date}")
                            else:
                                _logger.warning(f"‚ùå No membership fee found with name: {fee_part}")
                        
                        except (ValueError, IndexError) as e:
                            _logger.error(f"‚ùå Error parsing ref: {ref}. Error: {e}")
                    else:
                        _logger.info(f"‚ùå Invoice pattern not found in ref: {ref}")
                else:
                    _logger.info(f"‚ùå No admission found with name: {vals.get('invoice_origin')}")
            else:
                _logger.info(f"‚ùå Missing invoice_origin or ref")

        return super().create(vals_list)

    def write(self, vals):
        result = super().write(vals)
        
        # Check if we need to update the name after the invoice has been fully created
        for invoice in self:
            if invoice.membership_fee_name and invoice.name and invoice.name != '/' and '/' not in invoice.name[:-1]:
                # Only update if it's not already updated (doesn't contain fee name)
                if not invoice.name.startswith(invoice.membership_fee_name + '/'):
                    new_name = f"{invoice.membership_fee_name}/{invoice.name}"
                    super(AccountMove, invoice).write({'name': new_name})
                    _logger.info(f"‚úÖ Applied custom naming via write: {invoice.name} ‚Üí {new_name}")
        
        return result

    def action_recompute_prices_from_pricelist(self):
        self.ensure_one()
        if self.state != 'draft':
            raise ValidationError(_("Prices can only be recomputed on draft invoices."))

        if not self.pricelist_id:
            raise ValidationError(_("No pricelist found on this invoice to recompute prices."))

        _logger.info("Recalculating prices for invoice %s using pricelist %s", self.name, self.pricelist_id.name)

        for line in self.invoice_line_ids:
            if line.product_id:
                # Get the new price from the pricelist
                new_price = self.pricelist_id._get_product_price(
                    product=line.product_id,
                    quantity=line.quantity,
                    partner=self.partner_id,
                    date=self.invoice_date or fields.Date.today(),
                )
                # Apply the new price if it's different and valid
                # _get_product_price can return False if no rule applies, or 0.0 if price is 0.
                # We check for `is not False` to ensure it's a valid price.
                if new_price is not False and new_price != line.price_unit:
                    _logger.debug("Updating price for product %s from %s to %s on invoice %s",
                                 line.product_id.name, line.price_unit, new_price, self.name)
                    line.write({'price_unit': new_price})
                elif new_price is False:
                    _logger.warning("Pricelist %s returned no specific price for product %s on invoice %s. Keeping original price %s.",
                                    self.pricelist_id.name, line.product_id.name, self.name, line.price_unit)

        # Odoo's ORM usually handles recomputing totals when line prices change.
        # No explicit call to `_onchange_invoice_line_ids()` is strictly necessary here,
        # as Odoo will re-evaluate on save or UI refresh.

        _logger.info("Finished recalculating prices for invoice %s", self.name)
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'message': _("Prices recomputed successfully!"),
                'type': 'success',
                'sticky': False,
            }
        }
