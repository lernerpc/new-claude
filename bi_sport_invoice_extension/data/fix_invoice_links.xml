<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Server Action to Fix Existing Invoice Links -->
    <record id="action_fix_existing_invoice_links" model="ir.actions.server">
        <field name="name">Fix All Existing Invoice Links</field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="code">
# Find all invoices that need fixing
invoices = env['account.move'].search([
    '|',
    ('invoice_origin', '!=', False),
    ('ref', 'like', '%Registration%'),
    ('student_admission_id', '=', False),
    ('move_type', '=', 'out_invoice')
])

fixed_count = 0
for invoice in invoices:
    # Try to find matching student admission
    admission = env['student.admission'].search([
        '|',
        ('name', '=', invoice.invoice_origin),
        ('name', 'in', invoice.ref.split(' - '))
    ], limit=1)
    
    if admission:
        # Update the invoice with the admission link
        invoice.write({
            'student_admission_id': admission.id,
            'pricelist_id': admission.pricelist_id.id if admission.pricelist_id else False
        })
        fixed_count += 1

# Trigger recomputation of invoice counts
admissions = env['student.admission'].search([('id', 'in', invoices.mapped('student_admission_id').ids)])
admissions._compute_invoice_count()

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'message': f'Fixed {fixed_count} invoices! They are now properly linked to their registrations.',
        'type': 'success',
        'sticky': True,
    }
}
        </field>
    </record>

    <!-- Server Action to Fix Selected Invoices -->
    <record id="action_fix_selected_invoices" model="ir.actions.server">
        <field name="name">Fix Selected Invoices</field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="code">
fixed_count = 0
for invoice in records:
    if invoice.student_admission_id:
        continue
        
    # Try to find matching student admission
    admission = env['student.admission'].search([
        '|',
        ('name', '=', invoice.invoice_origin),
        ('name', 'in', invoice.ref.split(' - '))
    ], limit=1)
    
    if admission:
        # Update the invoice with the admission link
        invoice.write({
            'student_admission_id': admission.id,
            'pricelist_id': admission.pricelist_id.id if admission.pricelist_id else False
        })
        fixed_count += 1

# Trigger recomputation of invoice counts
admissions = env['student.admission'].search([('id', 'in', records.mapped('student_admission_id').ids)])
admissions._compute_invoice_count()

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'message': f'Fixed {fixed_count} invoices! They are now properly linked to their registrations.',
        'type': 'success',
        'sticky': True,
    }
}
        </field>
    </record>

    <!-- Server Action to Fix Old Registrations -->
    <record id="action_fix_old_registrations" model="ir.actions.server">
        <field name="name">Fix Old Registrations and Invoices</field>
        <field name="model_id" ref="bi_sport_center_management.model_student_admission"/>
        <field name="binding_model_id" ref="bi_sport_center_management.model_student_admission"/>
        <field name="state">code</field>
        <field name="code">
# Find all registrations that need fixing
registrations = env['student.admission'].search([
    '|',
    ('state', '=', 'new'),
    ('state', '=', 'enrolled')
])

fixed_registrations = 0
fixed_invoices = 0

for registration in registrations:
    # First fix the registration itself
    registration_updates = {}
    
    # Set pricelist if missing
    if not registration.pricelist_id:
        default_pricelist = env['product.pricelist'].search([], limit=1)
        if default_pricelist:
            registration_updates['pricelist_id'] = default_pricelist.id
    
    # Convert old sport_id to activity_ids if needed
    if not registration.activity_ids and registration.sport_id:
        registration_updates['activity_ids'] = [(4, registration.sport_id.id)]
    
    # Apply registration updates if any
    if registration_updates:
        registration.write(registration_updates)
        fixed_registrations += 1
    
    # Now fix any existing invoices
    invoices = env['account.move'].search([
        '|',
        ('invoice_origin', '=', registration.name),
        ('ref', 'like', f'%{registration.name}%'),
        ('student_admission_id', '=', False),
        ('move_type', '=', 'out_invoice')
    ])
    
    for invoice in invoices:
        # Update the invoice with the admission link
        update_vals = {
            'student_admission_id': registration.id,
            'pricelist_id': registration.pricelist_id.id if registration.pricelist_id else False
        }
        
        # Try to extract membership fee name from ref if not already set
        if not invoice.membership_fee_name and invoice.ref:
            try:
                # Try different patterns for fee name extraction
                fee_name = None
                
                # Pattern 1: "Invoice for FEE_NAME - REG_NAME"
                if invoice.ref.startswith('Invoice for ') and ' - ' in invoice.ref:
                    fee_name = invoice.ref.replace('Invoice for ', '').split(' - ')[0]
                
                # Pattern 2: "FEE_NAME - REG_NAME"
                elif ' - ' in invoice.ref:
                    fee_name = invoice.ref.split(' - ')[0]
                
                # Pattern 3: Just the fee name
                else:
                    fee_name = invoice.ref
                
                if fee_name:
                    membership_fee = env['sport.membership.fees'].search([
                        ('name', '=', fee_name)
                    ], limit=1)
                    
                    if membership_fee:
                        update_vals['membership_fee_name'] = membership_fee.name
                        # Update ref to be cleaner
                        update_vals['ref'] = f"{membership_fee.name} - {registration.name}"
            
            except Exception as e:
                pass
        
        # Apply the updates
        invoice.write(update_vals)
        fixed_invoices += 1

# Trigger recomputation of invoice counts
registrations._compute_invoice_count()

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'message': f'Fixed {fixed_registrations} registrations and {fixed_invoices} invoices! They are now properly linked.',
        'type': 'success',
        'sticky': True,
    }
}
        </field>
    </record>

    <!-- Server Action to Fix Selected Registrations -->
    <record id="action_fix_selected_registrations" model="ir.actions.server">
        <field name="name">Fix Selected Registrations and Their Invoices</field>
        <field name="model_id" ref="bi_sport_center_management.model_student_admission"/>
        <field name="binding_model_id" ref="bi_sport_center_management.model_student_admission"/>
        <field name="state">code</field>
        <field name="code">
fixed_registrations = 0
fixed_invoices = 0

for registration in records:
    # First fix the registration itself
    registration_updates = {}
    
    # Set pricelist if missing
    if not registration.pricelist_id:
        default_pricelist = env['product.pricelist'].search([], limit=1)
        if default_pricelist:
            registration_updates['pricelist_id'] = default_pricelist.id
    
    # Convert old sport_id to activity_ids if needed
    if not registration.activity_ids and registration.sport_id:
        registration_updates['activity_ids'] = [(4, registration.sport_id.id)]
    
    # Apply registration updates if any
    if registration_updates:
        registration.write(registration_updates)
        fixed_registrations += 1
    
    # Now fix any existing invoices
    invoices = env['account.move'].search([
        '|',
        ('invoice_origin', '=', registration.name),
        ('ref', 'like', f'%{registration.name}%'),
        ('student_admission_id', '=', False),
        ('move_type', '=', 'out_invoice')
    ])
    
    for invoice in invoices:
        # Update the invoice with the admission link
        update_vals = {
            'student_admission_id': registration.id,
            'pricelist_id': registration.pricelist_id.id if registration.pricelist_id else False
        }
        
        # Try to extract membership fee name from ref if not already set
        if not invoice.membership_fee_name and invoice.ref:
            try:
                # Try different patterns for fee name extraction
                fee_name = None
                
                # Pattern 1: "Invoice for FEE_NAME - REG_NAME"
                if invoice.ref.startswith('Invoice for ') and ' - ' in invoice.ref:
                    fee_name = invoice.ref.replace('Invoice for ', '').split(' - ')[0]
                
                # Pattern 2: "FEE_NAME - REG_NAME"
                elif ' - ' in invoice.ref:
                    fee_name = invoice.ref.split(' - ')[0]
                
                # Pattern 3: Just the fee name
                else:
                    fee_name = invoice.ref
                
                if fee_name:
                    membership_fee = env['sport.membership.fees'].search([
                        ('name', '=', fee_name)
                    ], limit=1)
                    
                    if membership_fee:
                        update_vals['membership_fee_name'] = membership_fee.name
                        # Update ref to be cleaner
                        update_vals['ref'] = f"{membership_fee.name} - {registration.name}"
            
            except Exception as e:
                pass
        
        # Apply the updates
        invoice.write(update_vals)
        fixed_invoices += 1

# Trigger recomputation of invoice counts
records._compute_invoice_count()

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'message': f'Fixed {fixed_registrations} registrations and {fixed_invoices} invoices! They are now properly linked.',
        'type': 'success',
        'sticky': True,
    }
}
        </field>
    </record>
</odoo>
